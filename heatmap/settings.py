"""
Django settings for heatmap project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
load_dotenv()

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv('GOOGLE_OAUTH_KEY')# Votre ID client
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv('GOOGLE_OAUTH_SECRET')
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
    'openid'
]
SOCIAL_AUTH_GOOGLE_OAUTH2_EXTRA_DATA = [
    ('first_name', 'given_name'),
    ('last_name', 'family_name'),
    ('picture', 'picture')
]

# Chemins par défaut pour Windows
if os.name == 'nt':
    # Option 1: Chemins Conda (prioritaire)
    conda_gdal_path = r'C:\Users\ASUS\miniconda3\envs\gis_env\Library\bin\gdal304.dll'
    conda_geos_path = r'C:\Users\ASUS\miniconda3\envs\gis_env\Library\bin\geos_c.dll'

    # Option 2: Chemins OSGeo4W (fallback)
    osgeo_gdal_path = r'C:\OSGeo4W\bin\gdal304.dll'
    osgeo_geos_path = r'C:\OSGeo4W\bin\geos_c.dll'

    # Configuration automatique
    if Path(conda_gdal_path).exists():
        GDAL_LIBRARY_PATH = conda_gdal_path
        GEOS_LIBRARY_PATH = conda_geos_path
        os.environ['PATH'] = f"{os.path.dirname(conda_gdal_path)};{os.environ['PATH']}"
    elif Path(osgeo_gdal_path).exists():
        GDAL_LIBRARY_PATH = osgeo_gdal_path
        GEOS_LIBRARY_PATH = osgeo_geos_path
        os.environ['PATH'] = f"C:\\OSGeo4W\\bin;{os.environ['PATH']}"  # Ou utilisez une raw string
    else:
        GDAL_LIBRARY_PATH = None
        GEOS_LIBRARY_PATH = None


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

LEAFLET_CONFIG = {
    'DEFAULT_CENTER': (20.0, 0.0),
    'DEFAULT_ZOOM': 2,
    'SCALE': 'both',
    'ATTRIBUTION_PREFIX': 'Cartographie Django',
}
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',  # Doit précéder contenttypes
    'django.contrib.contenttypes',  # UNE SEULE FOIS
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dashboard.apps.DashboardConfig',
    'django.contrib.gis',
    'social_django',

        # Référence complète
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'heatmap.urls'
LOGOUT_REDIRECT_URL = 'dashboard:login'
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.ModelBackend', 'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',]

LOGIN_URL = 'dashboard:login'
LOGIN_REDIRECT_URL = 'dashboard:dashboard'  # Where to redirect after login
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Configuration des sessions
AUTH_PASSWORD_VALIDATORS = []
CSRF_TRUSTED_ORIGINS = ['http://localhost:8000']

# Dans settings.py
CSRF_COOKIE_SECURE = False  # Désactive en développement
SESSION_COOKIE_SECURE = False  # Désactive en développement
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_HTTPONLY = True

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'dashboard/templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'heatmap.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',  # Utilisez le backend PostGIS
        'NAME': 'heatmap_db',                                # Nom de votre base PostgreSQL
        'USER': 'postgres',                                  # Utilisateur PostgreSQL (par défaut: postgres)
        'PASSWORD': '1234',                    # Mot de passe PostgreSQL
        'HOST': 'localhost',                                 # Ou l'adresse IP de votre serveur
        'PORT': '5432',                                      # Port par défaut de PostgreSQL
    }
}
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',  # <--- Add this line
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Where collected static files will be stored

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
